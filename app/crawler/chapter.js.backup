const puppeteer = require('puppeteer');
const mongoose = require('mongoose');

let url = `http://www.mytxt.cc/read/`;

const sleep = (time) => new Promise((resolve) => {
  setTimeout(resolve, time);
});

// startNum 缓存到全局
module.exports = {
  async taskChapter(bookId, startNum = 0) {
    url = `${url}${bookId}/`;
    console.log('Start visit the target page --- chapter', url)

    const browser = await puppeteer.launch({
      // executablePath: '/usr/bin/google-chrome-stable',
      args: ['--no-sandbox'],
      dumpio: false
    }).catch(err => {
      console.log('browser--error:', err)
      browser.close
    })

    const page = await browser.newPage()
    await page.goto(url, {
      waitUntil: 'networkidle2',
      timeout: 3000000
    })

    await sleep(3000)

    await page.waitForSelector('.story_list_m62topxs')

    let result = await page.evaluate((book) => {
      let list = document.querySelectorAll('.cp_dd_m62topxs li')
      let reg = new RegExp(`${book.bookId}\/(\\S*).html`)
      let chapter = Array.from(list).map((item, index) => {
        return {
          title: item.innerText,
          chapterId: item.innerHTML.match(reg)[1]
        }
      })
      return chapter
    }, book)

    // 截取从哪里爬数据
    let tempResult = result.slice(book.startNum, result.length)

    for (let i = 0; i < tempResult.length; i++) {
      let chapterId = tempResult[i].chapterId
      console.log('开始爬url:', `${url}${chapterId}.html`)

      await page.goto(`${url}${chapterId}.html`, {
        waitUntil: 'networkidle2',
        timeout: 3000000
      })

      await sleep(2000)

      const content = await page.evaluate(() => {
        return document.querySelectorAll('.detail_con_m62topxs p')[0].innerText
      })

      tempResult[i].content = content
      tempResult[i].bookId = book.bookId
      // tempResult[i].sort = i // 截取之后会不准

      // 循环保存数据库
      await saveChapter(tempResult[i]);
    }

    browser.close();
  }
}

async function saveChapter(data) {
  const Chapter = mongoose.model('Chapter');
  // console.log('开始爬取章节：', data)
  // 先找一下是否有数据了
  let chapterData = await Chapter.findOne({
    chapterId: data.chapterId
  })
  // console.log('chapterData', chapterData)
  // 需要将拿到的章节与存储的章节做对比  防止作者占坑
  if (!chapterData) {
    chapterData = new Chapter(data);
    console.log('chapterData save')
    try {
      await chapterData.save((err) => {
        if (err) {
          console.log('保存章章节失败', err)
        }
        console.log('保存成功~')
      })
    } catch(err) {
      console.log('保存章节异常', err)
    }
    return
  }
  // 进行字数对比 相差50字符
  if ((data.content.length - 50 >= 0) && (data.content.length - 50 > chapterData.content.length)) {

    Chapter.updateOne({
      chapterId: +data.chapterId
    }, {
      content: data.content
    });

  }
}
